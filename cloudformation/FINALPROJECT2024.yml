AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for creating VPC with subnets, Application Load Balancer, and Auto Scaling Group"
#Final Project with VPC, 2 public and 2 private subnets. Auto Scaling Group and Load Balancer.
#1 EIP, Nat Gateway, Internet Gateway, 2 Route Table. Target Group, Launch Template, Listener.
Parameters:

  Tag:
    Description: My Name
    Type: String
    Default: "Bermet" 

  InstanceType:
    Description: Instance Type for Auto Scaling Group
    Type: String
    Default: "t2.micro"
    AllowedValues: 
      - "t2.micro"
      - "t3.micro"

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnet1CIDR:
    Description: 1 CIDR for public subnet
    Type: String
    Default: "10.0.1.0/24"

  PublicSubnet2CIDR:
    Description: 2 CIDR for public subnet
    Type: String
    Default: "10.0.2.0/24"

  PrivateSubnet1CIDR:
    Description: 1 CIDR for private subnet
    Type: String
    Default: "10.0.3.0/24"

  PrivateSubnet2CIDR:
    Description: 2 CIDR for private subnet
    Type: String
    Default: "10.0.4.0/24"

Mappings:
  RegionMap:
    us-east-1:
      AMIID: ami-0c101f26f147fa7fd
    us-east-2:
      AMIID: ami-019f9b3318b7155c5

Resources:

  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyFormat: pem
      KeyName: mykey
      KeyType: rsa
      Tags:
        - Key: Owner
          Value: !Ref Tag

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref Tag
      GroupDescription: Allows SSH and HTTP access to developers
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Owner
          Value: !Ref Tag

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Owner
          Value: !Ref Tag

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Owner
          Value: !Ref Tag

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref IGW

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Tag} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Tag} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Tag} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Tag} Private Subnet (AZ2)

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: IGWAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Sub ${Tag} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Owner
          Value: !Sub ${Tag} Private Routes

  DefaultPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref NatGateway
    
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PrivateSubnet1
    
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PrivateSubnet2

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Name: !Ref Tag
      HealthCheckEnabled: true
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref Tag
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref MySecurityGroup
      Tags:
        - Key: Owner
          Value: !Ref Tag

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      VersionDescription: Initial version
      LaunchTemplateData:
        SecurityGroupIds: 
          - !Ref MySecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Owner
                Value: !Ref Tag
        KeyName: !Ref MyKeyPair
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            systemctl enable httpd
            systemctl start httpd
            echo "<h1>Hello World from $HOSTNAME</h1>" > /var/www/html/index.html
        InstanceType: !Ref InstanceType
        ImageId: !FindInMap [ RegionMap, !Ref AWS::Region, AMIID ]

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate
        Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref MyTargetGroup
      TerminationPolicies: 
        - OldestLaunchConfiguration
      Tags:
        - Key: Owner
          Value: !Ref Tag
          PropagateAtLaunch: true

Outputs:
  ELBDNSName:
    Description: DNS Name of the Elastic Load Balancer
    Value: !GetAtt MyLoadBalancer.DNSName
  Listener:
    Description: A reference to a port 80 listener
    Value: !Ref MyListener
  VPC:
    Description: A reference to the created VPC
    Value: !Ref MyVPC
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
  SecurityGroup:
    Description: Security Group for ALB
    Value: !Ref MySecurityGroup